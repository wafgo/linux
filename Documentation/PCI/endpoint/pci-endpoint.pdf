%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 5 0 R /F4 6 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/A <<
/S /URI /Type /Action /URI (mailto:kishon@ti.com)
>> /Border [ 0 0 0 ] /Rect [ 260.613 753.0236 326.333 765.0236 ] /Subtype /Link /Type /Annot
>>
endobj
5 0 obj
<<
/BaseFont /Times-Roman /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
6 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
7 0 obj
<<
/Annots [ 4 0 R ] /Contents 24 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
8 0 obj
<<
/Contents 25 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
9 0 obj
<<
/Contents 26 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
10 0 obj
<<
/Outlines 12 0 R /PageLabels 27 0 R /PageMode /UseNone /Pages 23 0 R /Type /Catalog
>>
endobj
11 0 obj
<<
/Author (Kishon Vijay Abraham I <kishon@ti.com>) /CreationDate (D:20230914155811-01'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20230914155811-01'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
12 0 obj
<<
/Count 13 /First 13 0 R /Last 14 0 R /Type /Outlines
>>
endobj
13 0 obj
<<
/Dest [ 7 0 R /XYZ 57.02362 708.0236 0 ] /Next 14 0 R /Parent 12 0 R /Title (Introduction)
>>
endobj
14 0 obj
<<
/Count 8 /Dest [ 7 0 R /XYZ 57.02362 567.0236 0 ] /First 15 0 R /Last 19 0 R /Parent 12 0 R /Prev 13 0 R 
  /Title (PCI Endpoint Core)
>>
endobj
15 0 obj
<<
/Count 3 /Dest [ 7 0 R /XYZ 57.02362 504.0236 0 ] /First 16 0 R /Last 18 0 R /Next 19 0 R /Parent 14 0 R 
  /Title (PCI Endpoint Controller\(EPC\) Library)
>>
endobj
16 0 obj
<<
/Dest [ 7 0 R /XYZ 57.02362 444.0236 0 ] /Next 17 0 R /Parent 15 0 R /Title (APIs for the PCI controller Driver)
>>
endobj
17 0 obj
<<
/Dest [ 8 0 R /XYZ 57.02362 723.0236 0 ] /Next 18 0 R /Parent 15 0 R /Prev 16 0 R /Title (EPC APIs for the PCI Endpoint Function Driver)
>>
endobj
18 0 obj
<<
/Dest [ 8 0 R /XYZ 57.02362 390.0236 0 ] /Parent 15 0 R /Prev 17 0 R /Title (Other EPC APIs)
>>
endobj
19 0 obj
<<
/Count 3 /Dest [ 9 0 R /XYZ 57.02362 765.0236 0 ] /First 20 0 R /Last 22 0 R /Parent 14 0 R /Prev 15 0 R 
  /Title (PCI Endpoint Function\(EPF\) Library)
>>
endobj
20 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 705.0236 0 ] /Next 21 0 R /Parent 19 0 R /Title (EPF APIs for the PCI Endpoint Function Driver)
>>
endobj
21 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 405.0236 0 ] /Next 22 0 R /Parent 19 0 R /Prev 20 0 R /Title (APIs for the PCI Endpoint Controller Library)
>>
endobj
22 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 300.0236 0 ] /Parent 19 0 R /Prev 21 0 R /Title (Other EPF APIs)
>>
endobj
23 0 obj
<<
/Count 3 /Kids [ 7 0 R 8 0 R 9 0 R ] /Type /Pages
>>
endobj
24 0 obj
<<
/Length 8628
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 750.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 36.93937 0 Td (Author:) Tj T* -36.93937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Kishon Vijay Abraham I <) Tj 0 .4 .6 rg (kishon@ti.com) Tj 0 0 0 rg (>) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 720.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .87755 Tw (This document is a guide to use the PCI Endpoint Framework in order to create endpoint controller driver,) Tj T* 0 Tw (endpoint function driver, and using configfs interface to bind the function driver to the controller driver.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 687.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F3 17.5 Tf .133333 .133333 .133333 rg (Introduction) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 633.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .365223 Tw (Linux has a comprehensive PCI subsystem to support PCI controllers that operates in Root Complex mode.) Tj T* 0 Tw -0.107603 Tw (The subsystem has capability to scan PCI bus, assign memory resources and IRQ resources, load PCI driver) Tj T* 0 Tw .907025 Tw (\(based on vendor ID, device ID\), support other services like hot-plug, power management, advanced error) Tj T* 0 Tw (reporting and virtual channels.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 579.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .093432 Tw (However the PCI controller IP integrated in some SoCs is capable of operating either in Root Complex mode) Tj T* 0 Tw .910491 Tw (or Endpoint mode. PCI Endpoint Framework will add endpoint mode support in Linux. This will help to run) Tj T* 0 Tw .706019 Tw (Linux in an EP system which can have a wide variety of use cases from testing or validation, co-processor) Tj T* 0 Tw (accelerator, etc.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 546.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F3 17.5 Tf .133333 .133333 .133333 rg (PCI Endpoint Core) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 516.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.085832 Tw (The PCI Endpoint Core layer comprises 3 components: the Endpoint Controller library, the Endpoint Function) Tj T* 0 Tw (library, and the configfs layer to bind the endpoint function with the endpoint controller.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 486.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F3 15 Tf .133333 .133333 .133333 rg (PCI Endpoint Controller\(EPC\) Library) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 456.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.000464 Tw (The EPC library provides APIs to be used by the controller that can operate in endpoint mode. It also) Tj T* 0 Tw (provides APIs to be used by function driver/library in order to implement a particular endpoint function.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 429.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (APIs for the PCI controller Driver) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 411.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This section lists the APIs that the PCI Endpoint core provides to be used by the PCI controller driver.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 405.0236 cm
Q
q
1 0 0 1 57.02362 405.0236 cm
Q
q
1 0 0 1 57.02362 195.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 195 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 195 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (devm_pci_epc_create\(\)/pci_epc_create\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 189 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 180 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI controller driver should implement the following ops:) Tj T* ET
Q
Q
q
1 0 0 1 20 174 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 126 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (write_header: ops to populate configuration space header) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 108 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (set_bar: ops to configure the BAR) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 90 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (clear_bar: ops to reset the BAR) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (alloc_addr_space: ops to allocate in PCI controller address space) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (free_addr_space: ops to free the allocated address space) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (raise_irq: ops to raise a legacy, MSI or MSI-X interrupt) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (start: ops to start the PCI link) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (stop: ops to stop the PCI link) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 10.0732 Tw (The PCI controller driver can then create a new EPC device by invoking) Tj T* 0 Tw (devm_pci_epc_create\(\)/pci_epc_create\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 189.0236 cm
Q
q
1 0 0 1 57.02362 147.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (devm_pci_epc_destroy\(\)/pci_epc_destroy\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .577565 Tw (The PCI controller driver can destroy the EPC device created by either devm_pci_epc_create\(\) or) Tj T* 0 Tw (pci_epc_create\(\) using devm_pci_epc_destroy\(\) or pci_epc_destroy\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 141.0236 cm
Q
q
1 0 0 1 57.02362 99.02362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_linkup\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.629314 Tw (In order to notify all the function devices that the EPC device to which they are linked has) Tj T* 0 Tw (established a link with the host, the PCI controller driver should invoke pci_epc_linkup\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 93.02362 cm
Q
q
1 0 0 1 57.02362 63.02362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_mem_init\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Initialize the pci_epc_mem structure used for allocating EPC addr space.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 62.69291 cm
Q
 
endstream
endobj
25 0 obj
<<
/Length 9305
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 735.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_mem_exit\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Cleanup the pci_epc_mem structure allocated during pci_epc_mem_init\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 735.0236 cm
Q
q
1 0 0 1 57.02362 708.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (EPC APIs for the PCI Endpoint Function Driver) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 690.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL -0.094298 Tw (This section lists the APIs that the PCI Endpoint core provides to be used by the PCI endpoint function driver.) Tj T* 0 Tw ET
Q
Q
q
1 0 0 1 57.02362 684.0236 cm
Q
q
1 0 0 1 57.02362 684.0236 cm
Q
q
1 0 0 1 57.02362 642.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_write_header\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.913486 Tw (The PCI endpoint function driver should use pci_epc_write_header\(\) to write the standard) Tj T* 0 Tw (configuration header to the endpoint controller.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 636.0236 cm
Q
q
1 0 0 1 57.02362 582.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_set_bar\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 33 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.011529 Tw (The PCI endpoint function driver should use pci_epc_set_bar\(\) to configure the Base Address) Tj T* 0 Tw 1.25755 Tw (Register in order for the host to assign PCI addr space. Register space of the function driver is) Tj T* 0 Tw (usually configured using this API.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 576.0236 cm
Q
q
1 0 0 1 57.02362 546.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_clear_bar\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI endpoint function driver should use pci_epc_clear_bar\(\) to reset the BAR.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 540.0236 cm
Q
q
1 0 0 1 57.02362 498.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_raise_irq\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .789873 Tw (The PCI endpoint function driver should use pci_epc_raise_irq\(\) to raise Legacy Interrupt, MSI or) Tj T* 0 Tw (MSI-X Interrupt.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 492.0236 cm
Q
q
1 0 0 1 57.02362 450.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_mem_alloc_addr\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.028835 Tw (The PCI endpoint function driver should use pci_epc_mem_alloc_addr\(\), to allocate memory) Tj T* 0 Tw (address from EPC addr space which is required to access RC's buffer) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 444.0236 cm
Q
q
1 0 0 1 57.02362 402.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_mem_free_addr\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .624029 Tw (The PCI endpoint function driver should use pci_epc_mem_free_addr\(\) to free the memory space) Tj T* 0 Tw (allocated using pci_epc_mem_alloc_addr\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 402.0236 cm
Q
q
1 0 0 1 57.02362 375.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (Other EPC APIs) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 345.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.384353 Tw (There are other APIs provided by the EPC library. These are used for binding the EPF device with EPC) Tj T* 0 Tw (device. pci-ep-cfs.c can be used as reference for using these APIs.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 339.0236 cm
Q
q
1 0 0 1 57.02362 339.0236 cm
Q
q
1 0 0 1 57.02362 309.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_get\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Get a reference to the PCI endpoint controller based on the device name of the controller.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 303.0236 cm
Q
q
1 0 0 1 57.02362 273.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_put\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Release the reference to the PCI endpoint controller obtained using pci_epc_get\(\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 267.0236 cm
Q
q
1 0 0 1 57.02362 225.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_add_epf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .073241 Tw (Add a PCI endpoint function to a PCI endpoint controller. A PCIe device can have up to 8 functions) Tj T* 0 Tw (according to the specification.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 219.0236 cm
Q
q
1 0 0 1 57.02362 189.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_remove_epf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Remove the PCI endpoint function from PCI endpoint controller.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 183.0236 cm
Q
q
1 0 0 1 57.02362 141.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_start\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .274488 Tw (The PCI endpoint function driver should invoke pci_epc_start\(\) once it has configured the endpoint) Tj T* 0 Tw (function and wants to start the PCI link.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 135.0236 cm
Q
q
1 0 0 1 57.02362 105.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epc_stop\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI endpoint function driver should invoke pci_epc_stop\(\) to stop the PCI LINK.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 105.0236 cm
Q
 
endstream
endobj
26 0 obj
<<
/Length 8360
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F3 15 Tf .133333 .133333 .133333 rg (PCI Endpoint Function\(EPF\) Library) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.383797 Tw (The EPF library provides APIs to be used by the function driver and the EPC library to provide endpoint) Tj T* 0 Tw (mode functionality.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 690.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (EPF APIs for the PCI Endpoint Function Driver) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 672.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL -0.094298 Tw (This section lists the APIs that the PCI Endpoint core provides to be used by the PCI endpoint function driver.) Tj T* 0 Tw ET
Q
Q
q
1 0 0 1 57.02362 666.0236 cm
Q
q
1 0 0 1 57.02362 666.0236 cm
Q
q
1 0 0 1 57.02362 537.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 114 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 114 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_register_driver\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 108 cm
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (The PCI Endpoint Function driver should implement the following ops:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 68 Tm  T* ET
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 60 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bind: ops to perform when a EPC device has been bound to EPF device) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.14989 Tw (unbind: ops to perform when a binding has been lost between a EPC device and EPF) Tj T* 0 Tw (device) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.312739 Tw (linkup: ops to perform when the EPC device has established a connection with a host) Tj T* 0 Tw (system) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 15 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI Function driver can then register the PCI EPF driver by using pci_epf_register_driver\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 531.0236 cm
Q
q
1 0 0 1 57.02362 501.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_unregister_driver\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI Function driver can unregister the PCI EPF driver by using pci_epf_unregister_driver\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 495.0236 cm
Q
q
1 0 0 1 57.02362 465.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_alloc_space\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PCI Function driver can allocate space for a particular BAR using pci_epf_alloc_space\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 459.0236 cm
Q
q
1 0 0 1 57.02362 417.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_free_space\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.772362 Tw (The PCI Function driver can free the allocated space \(using pci_epf_alloc_space\) by invoking) Tj T* 0 Tw (pci_epf_free_space\(\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 417.0236 cm
Q
q
1 0 0 1 57.02362 390.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (APIs for the PCI Endpoint Controller Library) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 360.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.259353 Tw (This section lists the APIs that the PCI Endpoint core provides to be used by the PCI endpoint controller) Tj T* 0 Tw (library.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 354.0236 cm
Q
q
1 0 0 1 57.02362 354.0236 cm
Q
q
1 0 0 1 57.02362 312.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_linkup\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .485696 Tw (The PCI endpoint controller library invokes pci_epf_linkup\(\) when the EPC device has established) Tj T* 0 Tw (the connection to the host.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 312.0236 cm
Q
q
1 0 0 1 57.02362 285.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F3 12.5 Tf .133333 .133333 .133333 rg (Other EPF APIs) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 255.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .228334 Tw (There are other APIs provided by the EPF library. These are used to notify the function driver when the EPF) Tj T* 0 Tw (device is bound to the EPC device. pci-ep-cfs.c can be used as reference for using these APIs.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 249.0236 cm
Q
q
1 0 0 1 57.02362 249.0236 cm
Q
q
1 0 0 1 57.02362 207.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_create\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .101492 Tw (Create a new PCI EPF device by passing the name of the PCI EPF device. This name will be used) Tj T* 0 Tw (to bind the EPF device to a EPF driver.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 201.0236 cm
Q
q
1 0 0 1 57.02362 171.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_destroy\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Destroy the created PCI EPF device.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 165.0236 cm
Q
q
1 0 0 1 57.02362 135.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_bind\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_bind\(\) should be invoked when the EPF device has been bound to a EPC device.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 129.0236 cm
Q
q
1 0 0 1 57.02362 99.02362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL 8 0 Td (\177) Tj T* -8 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_unbind\(\)) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pci_epf_unbind\(\) should be invoked when the binding between EPC device and EPF device is lost.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 99.02362 cm
Q
 
endstream
endobj
27 0 obj
<<
/Nums [ 0 28 0 R 1 29 0 R 2 30 0 R ]
>>
endobj
28 0 obj
<<
/S /D /St 1
>>
endobj
29 0 obj
<<
/S /D /St 2
>>
endobj
30 0 obj
<<
/S /D /St 3
>>
endobj
xref
0 31
0000000000 65535 f 
0000000073 00000 n 
0000000134 00000 n 
0000000241 00000 n 
0000000353 00000 n 
0000000523 00000 n 
0000000632 00000 n 
0000000737 00000 n 
0000000960 00000 n 
0000001165 00000 n 
0000001370 00000 n 
0000001476 00000 n 
0000001772 00000 n 
0000001847 00000 n 
0000001960 00000 n 
0000002117 00000 n 
0000002295 00000 n 
0000002430 00000 n 
0000002589 00000 n 
0000002704 00000 n 
0000002880 00000 n 
0000003026 00000 n 
0000003184 00000 n 
0000003299 00000 n 
0000003371 00000 n 
0000012051 00000 n 
0000021408 00000 n 
0000029820 00000 n 
0000029879 00000 n 
0000029913 00000 n 
0000029947 00000 n 
trailer
<<
/ID 
[<9757def4bd52b4597e74ed4628979118><9757def4bd52b4597e74ed4628979118>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 11 0 R
/Root 10 0 R
/Size 31
>>
startxref
29981
%%EOF
